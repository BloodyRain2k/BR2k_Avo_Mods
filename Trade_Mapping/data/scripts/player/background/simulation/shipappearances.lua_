--[[ 
ShipAppearances.br2k_spawnShips = ShipAppearances.spawnShips
function ShipAppearances.spawnShips(x, y)
	ShipAppearances.br2k_spawnShips(x, y)
	print(string.format("Ship appearance in %s, %s", x, y))
end
]]

ShipAppearances.tm_addToVisible = ShipAppearances.addToVisible
function ShipAppearances.addToVisible(ownerIndex, visualizedShip, x, y)
	ShipAppearances.tm_addToVisible(ownerIndex, visualizedShip, x, y)
	print(string.format("addToVisible: %s in %s, %s", visualizedShip.name, x, y))
	
	local entry = ShipDatabaseEntry(ownerIndex, visualizedShip.name)
	local systems = entry:getSystems()
	local galaxy = Galaxy()
	for k,v in pairs(systems) do
		local script = string.lower(string.gmatch(k.script, "/(%w+)%.lua")())
		if script == "tradingoverview" then
			print(string.format("%s [%s] - %s", k.name, k.rarity, script))

			if galaxy.sectorLoaded and galaxy:sectorLoaded(x, y) then
				print(string.format("sector %s, %s is loaded", x, y))
				local sellable, buyable = TradingUtility.detectBuyableAndSellableGoods(_, _, true, sector)
				local goods_data, sellingCount, buyingCount = TradingUtility.summarizeSector(sellable, buyable)
				printTable({ sellable = sellable, buyable = buyable, goods = goods_data, sellCount = sellingCount, buyCount = buyingCount })
			end		
		end
	end
end
